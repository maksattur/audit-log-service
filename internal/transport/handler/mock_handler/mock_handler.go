// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transport/handler/handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/maksattur/audit-log-service/internal/domain"
)

// MockAuditLogService is a mock of AuditLogService interface.
type MockAuditLogService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogServiceMockRecorder
}

// MockAuditLogServiceMockRecorder is the mock recorder for MockAuditLogService.
type MockAuditLogServiceMockRecorder struct {
	mock *MockAuditLogService
}

// NewMockAuditLogService creates a new mock instance.
func NewMockAuditLogService(ctrl *gomock.Controller) *MockAuditLogService {
	mock := &MockAuditLogService{ctrl: ctrl}
	mock.recorder = &MockAuditLogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogService) EXPECT() *MockAuditLogServiceMockRecorder {
	return m.recorder
}

// EventsHttp mocks base method.
func (m *MockAuditLogService) EventsHttp(ctx context.Context, filter *domain.Filter) ([]*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsHttp", ctx, filter)
	ret0, _ := ret[0].([]*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventsHttp indicates an expected call of EventsHttp.
func (mr *MockAuditLogServiceMockRecorder) EventsHttp(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsHttp", reflect.TypeOf((*MockAuditLogService)(nil).EventsHttp), ctx, filter)
}

// MockTokenizer is a mock of Tokenizer interface.
type MockTokenizer struct {
	ctrl     *gomock.Controller
	recorder *MockTokenizerMockRecorder
}

// MockTokenizerMockRecorder is the mock recorder for MockTokenizer.
type MockTokenizerMockRecorder struct {
	mock *MockTokenizer
}

// NewMockTokenizer creates a new mock instance.
func NewMockTokenizer(ctrl *gomock.Controller) *MockTokenizer {
	mock := &MockTokenizer{ctrl: ctrl}
	mock.recorder = &MockTokenizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenizer) EXPECT() *MockTokenizerMockRecorder {
	return m.recorder
}

// BuildToken mocks base method.
func (m *MockTokenizer) BuildToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildToken indicates an expected call of BuildToken.
func (mr *MockTokenizerMockRecorder) BuildToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildToken", reflect.TypeOf((*MockTokenizer)(nil).BuildToken))
}

// VerifyToken mocks base method.
func (m *MockTokenizer) VerifyToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenizerMockRecorder) VerifyToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenizer)(nil).VerifyToken), arg0)
}
